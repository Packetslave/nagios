#!/usr/bin/perl
#
# Nagios plugin that raises a WARNING or CRITICAL if a Cisco IOS device has changes
# to its running-config that are more recent than the last changed version
# of the startup-config.
#
# AUTHORS:
# Brian Landers <brian@packetslave.com>
#
# Based on code from Opsview by Opsera Limited. This code is released
# under the terms of the GNU General Public License, version 2 or later.
#
# Based on a blog post by Terry Slattery of Chesapeake NetCraftsmen.
#
# Adapted 01/2014 by Simon Meggle <simon.meggle@consol.de>
# - plugin uses OID startupLastChanged instead of runningLastSaved
# - improved output
# - introduced parameter --boottime, which saved the running-config write on boot time 
#   from being recognized as unsaved change

use lib qw ( /usr/local/nagios/perl/lib );
use Net::SNMP;
use Getopt::Std;
use Time::localtime;
use strict;

my $script = "check_snmp_cisco_unsaved";
my $script_version = "1.1";

my $metric = 1;
my $oid_sysDescr = ".1.3.6.1.2.1.1.1.0";
my $oid_uptime = "1.3.6.1.2.1.1.3.0";
my $oid_runningLastChanged = ".1.3.6.1.4.1.9.9.43.1.1.1.0";
my $oid_startupLastChanged = ".1.3.6.1.4.1.9.9.43.1.1.3.0";

my $ipaddress = "192.168.10.30";
my $version = "1";
my $snmpv3_username = "initial"; # SNMPv3 username
my $snmpv3_password = ""; # SNMPv3 password
my $snmpv3_authprotocol = "md5"; # SNMPv3 hash algorithm (md5 / sha)
my $snmpv3_privprotocol = "des"; # SNMPv3 encryption protocol (des / aes / aes128)
my $community = "public"; # Default community string (for SNMP v1 / v2c)
my $timeout = 2;
my $status = 0;
my $returnstring = "";
my $port = 161;
my $warnmin = 60;
my $critmin = 120;
my $boottime = 180;

my $community = "public"; # Default community string
my $configfilepath = "/usr/local/nagios/etc";

# Do we have enough information?
if ( @ARGV < 1 ) {
    print "Too few arguments\n";
    usage();
}

our ( $opt_h, $opt_H, $opt_C, $opt_U, $opt_P, $opt_a, $opt_e, $opt_v, $opt_p, $opt_w, $opt_c, $opt_b );
my ( $hostname );
getopts("hH:C:U:P:v:a:e:w:c:b:");
if ($opt_h) {
    usage();
    exit(0);
}
if ($opt_H) {
    $hostname = $opt_H;
}
else {
    print "No hostname specified\n";
    usage();
}
if ($opt_C) {
    $community = $opt_C;
}
if ($opt_U) {
    $snmpv3_username = $opt_U;
}
if ($opt_P) {
    $snmpv3_password = $opt_P;
}
if ($opt_a) {
    $snmpv3_authprotocol = $opt_a;
}
if ($opt_e) {
    $snmpv3_privprotocol = $opt_e;
}
if ($opt_v) {
    $version = $opt_v;
}
if ($opt_p) {
    $port = $opt_p;
}

if ($opt_w) {
    $warnmin = $opt_w;
}
if ($opt_c) {
    $critmin = $opt_c;
}
if ($opt_b) {
    $boottime = $opt_b;
}

# Checks whether requested SNMP version is supported
if ( $version !~ /^[13]|[2c]$/ ) {
    print "SNMP v$version not supported by this plugin\n";
    exit(1);
}

# Create the SNMP session
my ( $s, $e );
if ( $version == "3" ) {
    ( $s, $e ) = Net::SNMP->session(
        -username => $snmpv3_username,
        -authpassword => $snmpv3_password,
        -authprotocol => $snmpv3_authprotocol,
        -privprotocol => $snmpv3_privprotocol,
        -hostname => $hostname,
        -version => $version,
        -timeout => $timeout,
        -port => $port,
        -boottime => $boottime,
    );
    if ($s) {
    }
    else {
        print "Agent not responding, tried SNMP v3 ($e)\n";
        exit(1);
    }
}

my $triedv2c = 0; # Track whether we've attempted SNMPv2c connection
if ( $version == "2c" ) {
    ( $s, $e ) = Net::SNMP->session(
        -community => $community,
        -hostname => $hostname,
        -version => $version,
        -timeout => $timeout,
        -port => $port,
    );
    if ( !defined( $s->get_request($oid_sysDescr) ) ) {

        # try SNMP v1 if v2c doesn't work
        $triedv2c = 1;
        $version = 1;
    }
}

if ( $version == "1" ) {
    ( $s, $e ) = Net::SNMP->session(
        -community => $community,
        -hostname => $hostname,
        -version => $version,
        -timeout => $timeout,
        -port => $port,
    );
    if ( !defined( $s->get_request($oid_sysDescr) ) ) {
        if ( $triedv2c == 1 ) {
            print "Agent not responding, tried SNMP v1 and v2c\n";
        }
        else {
            print "Agent not responding, tried SNMP v1\n";
        }
        exit(1);
    }
}

($status,$returnstring) = main();

# Close the session
$s->close();

if ( $returnstring eq "" ) {
    $status = 3;
}

print "$returnstring\n";

exit $status;

####################################################################
# This is where we gather data via SNMP and return results #
####################################################################

sub main {

    my $running_lchanged = 0;
    my $startup_lchanged = 0;
    my $uptime = 0;

    $s->translate(0);

    if ( !defined( $s->get_request($oid_runningLastChanged) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $running_lchanged = $s->var_bind_list()->{$_};
    }

    if ( !defined( $s->get_request($oid_startupLastChanged) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $startup_lchanged = $s->var_bind_list()->{$_};
    }


    if ( !defined( $s->get_request($oid_uptime) ) ) {
        if ( !defined( $s->get_request($oid_uptime) ) ) {
            $returnstring = "SNMP agent not responding";
            $status = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $uptime = $s->var_bind_list()->{$_};
    }

    my $status = 0;

    my $deltasec_running = ($uptime - $running_lchanged) / 100;
    my $deltasec_startup = ($uptime - $startup_lchanged) / 100;
    my $running_time = localtime(time()-$deltasec_running);
    my $startup_time = localtime(time()-$deltasec_startup);
    my $running_changed_date = sprintf("%02d.%02d.%d, %02d:%02d:%02d",$running_time->mday,$running_time->mon+1,$running_time->year+1900,$running_time->hour,$running_time->min,$running_time->sec );
    my $startup_lchanged_date = sprintf("%02d.%02d.%d, %02d:%02d:%02d",$startup_time->mday,$startup_time->mon+1,$startup_time->year+1900,$startup_time->hour,$startup_time->min,$startup_time->sec );

    # time since last running cfg change until now
    my $deltamin = sprintf("%d",(($uptime - $running_lchanged) / 100) / 60);

    # SNMPv2-SMI::enterprises.9.9.43.1.1.1.0 = Timeticks: (9056) 0:01:30.56 --> running lastchanged
    # SNMPv2-SMI::enterprises.9.9.43.1.1.3.0 = Timeticks: (0) 0:00:00.00    --> startup lastchanged

    if ($startup_lchanged > $running_lchanged) {
        $status = 0;
        my $time = localtime(time()-$deltasec_startup);
        $returnstring = sprintf("OK: Device running configuration is unchanged (last startup cfg saved at " . $startup_lchanged_date . ")" );
    } elsif ($startup_lchanged/100 == 0 and ($running_lchanged/100) < $boottime ) {
        $status = 0;
        $returnstring = "OK: Device running configuration is unchanged (no cfg change since last reboot).";
    } else {
        if ($deltamin > $critmin) {
            $status = 2;
            $returnstring = sprintf("CRITICAL: Device running configuration was CHANGED on %s and is UNSAVED since %d min (warn at %d, crit at %d min).", $running_changed_date,$deltamin, $warnmin, $critmin);

        } elsif ($deltamin > $warnmin) {
            $status = 1;
            $returnstring = sprintf("WARNING: Device running configuration was CHANGED on %s and is UNSAVED since %d min (warn at %d, crit at %d min).", $running_changed_date,$deltamin, $warnmin, $critmin); 

        } else {
            $status = 0;
            $returnstring = sprintf("OK: Device running configuration was changed on %s and is unsaved since %d min (warn at %d, crit at %d min).", $running_changed_date,$deltamin, $warnmin, $critmin);
        }
    }

    return ($status,$returnstring);

}

####################################################################
# help and usage information #
####################################################################

sub usage {
    print << "USAGE";
--------------------------------------------------------------------
$script v$script_version

Checks Cisco IOS devices for unsaved configuration changes

Usage: $script -H <hostname> -c <community>
Options:
        -H Hostname or IP address
        -p Port (default:161)
        -C Community (default: public)
        -b Estimated boot time of the device. Because the running 
           config will be written (=changed) on each boot process, 
           this change must no be alarmed. Default: 180 seconds.
--------------------------------------------------------------------
This program is free software; you can redistribute it or modify
it under the terms of the GNU General Public License
--------------------------------------------------------------------

USAGE
    exit 1;
}
